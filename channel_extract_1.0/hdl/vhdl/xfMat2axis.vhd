-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xfMat2axis is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_dst_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_dst_data_V_empty_n : IN STD_LOGIC;
    p_dst_data_V_read : OUT STD_LOGIC;
    dst_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    dst_TVALID : OUT STD_LOGIC;
    dst_TREADY : IN STD_LOGIC;
    dst_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    src_rows_cast1_loc_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    src_rows_cast1_loc_empty_n : IN STD_LOGIC;
    src_rows_cast1_loc_read : OUT STD_LOGIC;
    src_cols_cast2_loc_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    src_cols_cast2_loc_empty_n : IN STD_LOGIC;
    src_cols_cast2_loc_read : OUT STD_LOGIC );
end;


architecture behav of xfMat2axis is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_dst_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln25_reg_212 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln25_reg_212_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal src_rows_cast1_loc_blk_n : STD_LOGIC;
    signal src_cols_cast2_loc_blk_n : STD_LOGIC;
    signal j_0_i_i_reg_97 : STD_LOGIC_VECTOR (11 downto 0);
    signal src_rows_cast1_loc_r_reg_178 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal src_cols_cast2_loc_r_reg_183 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln29_fu_112_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_reg_188 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_1_fu_122_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_1_reg_193 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln24_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal regslice_both_dst_data_V_U_apdone_blk : STD_LOGIC;
    signal i_fu_137_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_202 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln29_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_207 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_fu_157_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal and_ln29_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_reg_221 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal i_0_i_i_reg_86 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln29_fu_108_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_1_fu_118_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln24_fu_128_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln25_fu_148_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln29_1_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal dst_TDATA_int : STD_LOGIC_VECTOR (23 downto 0);
    signal dst_TVALID_int : STD_LOGIC;
    signal dst_TREADY_int : STD_LOGIC;
    signal regslice_both_dst_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dst_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dst_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dst_last_V_U_vld_out : STD_LOGIC;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_dst_data_V_U : component regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => dst_TDATA_int,
        vld_in => dst_TVALID_int,
        ack_in => dst_TREADY_int,
        data_out => dst_TDATA,
        vld_out => regslice_both_dst_data_V_U_vld_out,
        ack_out => dst_TREADY,
        apdone_blk => regslice_both_dst_data_V_U_apdone_blk);

    regslice_both_dst_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => and_ln29_reg_221,
        vld_in => dst_TVALID_int,
        ack_in => regslice_both_dst_last_V_U_ack_in_dummy,
        data_out => dst_TLAST,
        vld_out => regslice_both_dst_last_V_U_vld_out,
        ack_out => dst_TREADY,
        apdone_blk => regslice_both_dst_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((regslice_both_dst_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln24_fu_132_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((regslice_both_dst_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln24_fu_132_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((regslice_both_dst_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln24_fu_132_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_i_reg_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_i_i_reg_86 <= i_reg_202;
            elsif ((not(((ap_start = ap_const_logic_0) or (src_cols_cast2_loc_empty_n = ap_const_logic_0) or (src_rows_cast1_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_i_reg_86 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    j_0_i_i_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_dst_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln24_fu_132_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_i_i_reg_97 <= ap_const_lv12_0;
            elsif (((icmp_ln25_fu_152_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_0_i_i_reg_97 <= j_fu_157_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (src_cols_cast2_loc_empty_n = ap_const_logic_0) or (src_rows_cast1_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln29_1_reg_193 <= add_ln29_1_fu_122_p2;
                add_ln29_reg_188 <= add_ln29_fu_112_p2;
                src_cols_cast2_loc_r_reg_183 <= src_cols_cast2_loc_dout;
                src_rows_cast1_loc_r_reg_178 <= src_rows_cast1_loc_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_152_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln29_reg_221 <= and_ln29_fu_168_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_dst_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_202 <= i_fu_137_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln25_reg_212 <= icmp_ln25_fu_152_p2;
                icmp_ln25_reg_212_pp0_iter1_reg <= icmp_ln25_reg_212;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_dst_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln24_fu_132_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln29_reg_207 <= icmp_ln29_fu_143_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, src_rows_cast1_loc_empty_n, src_cols_cast2_loc_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln24_fu_132_p2, ap_CS_fsm_state2, regslice_both_dst_data_V_U_apdone_blk, icmp_ln25_fu_152_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (src_cols_cast2_loc_empty_n = ap_const_logic_0) or (src_rows_cast1_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((regslice_both_dst_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln24_fu_132_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((regslice_both_dst_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln24_fu_132_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln25_fu_152_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln25_fu_152_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln29_1_fu_122_p2 <= std_logic_vector(unsigned(zext_ln29_1_fu_118_p1) + unsigned(ap_const_lv13_1FFF));
    add_ln29_fu_112_p2 <= std_logic_vector(unsigned(zext_ln29_fu_108_p1) + unsigned(ap_const_lv13_1FFF));
    and_ln29_fu_168_p2 <= (icmp_ln29_reg_207 and icmp_ln29_1_fu_163_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_dst_data_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln25_reg_212)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln25_reg_212 = ap_const_lv1_0) and (p_dst_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_dst_data_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln25_reg_212, ap_enable_reg_pp0_iter2, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or ((icmp_ln25_reg_212 = ap_const_lv1_0) and (p_dst_data_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_dst_data_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln25_reg_212, ap_enable_reg_pp0_iter2, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or ((icmp_ln25_reg_212 = ap_const_lv1_0) and (p_dst_data_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, src_rows_cast1_loc_empty_n, src_cols_cast2_loc_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (src_cols_cast2_loc_empty_n = ap_const_logic_0) or (src_rows_cast1_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(icmp_ln25_reg_212, dst_TREADY_int)
    begin
                ap_block_state4_io <= ((icmp_ln25_reg_212 = ap_const_lv1_0) and (dst_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter1_assign_proc : process(p_dst_data_V_empty_n, icmp_ln25_reg_212)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln25_reg_212 = ap_const_lv1_0) and (p_dst_data_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_io_assign_proc : process(icmp_ln25_reg_212_pp0_iter1_reg, dst_TREADY_int)
    begin
                ap_block_state5_io <= ((icmp_ln25_reg_212_pp0_iter1_reg = ap_const_lv1_0) and (dst_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln25_fu_152_p2)
    begin
        if ((icmp_ln25_fu_152_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln24_fu_132_p2, ap_CS_fsm_state2, regslice_both_dst_data_V_U_apdone_blk)
    begin
        if (((regslice_both_dst_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln24_fu_132_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln24_fu_132_p2, ap_CS_fsm_state2, regslice_both_dst_data_V_U_apdone_blk)
    begin
        if (((regslice_both_dst_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln24_fu_132_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dst_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln25_reg_212, ap_enable_reg_pp0_iter2, icmp_ln25_reg_212_pp0_iter1_reg, dst_TREADY_int)
    begin
        if ((((icmp_ln25_reg_212_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln25_reg_212 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            dst_TDATA_blk_n <= dst_TREADY_int;
        else 
            dst_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_TDATA_int <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_dst_data_V_dout),24));
    dst_TVALID <= regslice_both_dst_data_V_U_vld_out;

    dst_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln25_reg_212, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln25_reg_212 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_TVALID_int <= ap_const_logic_1;
        else 
            dst_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_137_p2 <= std_logic_vector(unsigned(i_0_i_i_reg_86) + unsigned(ap_const_lv12_1));
    icmp_ln24_fu_132_p2 <= "1" when (i_0_i_i_reg_86 = src_rows_cast1_loc_r_reg_178) else "0";
    icmp_ln25_fu_152_p2 <= "1" when (j_0_i_i_reg_97 = src_cols_cast2_loc_r_reg_183) else "0";
    icmp_ln29_1_fu_163_p2 <= "1" when (zext_ln25_fu_148_p1 = add_ln29_1_reg_193) else "0";
    icmp_ln29_fu_143_p2 <= "1" when (zext_ln24_fu_128_p1 = add_ln29_reg_188) else "0";
    j_fu_157_p2 <= std_logic_vector(unsigned(j_0_i_i_reg_97) + unsigned(ap_const_lv12_1));

    p_dst_data_V_blk_n_assign_proc : process(p_dst_data_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln25_reg_212)
    begin
        if (((icmp_ln25_reg_212 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_dst_data_V_blk_n <= p_dst_data_V_empty_n;
        else 
            p_dst_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_dst_data_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln25_reg_212, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln25_reg_212 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_dst_data_V_read <= ap_const_logic_1;
        else 
            p_dst_data_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_cols_cast2_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_cols_cast2_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_cols_cast2_loc_blk_n <= src_cols_cast2_loc_empty_n;
        else 
            src_cols_cast2_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_cols_cast2_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_rows_cast1_loc_empty_n, src_cols_cast2_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (src_cols_cast2_loc_empty_n = ap_const_logic_0) or (src_rows_cast1_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_cols_cast2_loc_read <= ap_const_logic_1;
        else 
            src_cols_cast2_loc_read <= ap_const_logic_0;
        end if; 
    end process;


    src_rows_cast1_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_rows_cast1_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_rows_cast1_loc_blk_n <= src_rows_cast1_loc_empty_n;
        else 
            src_rows_cast1_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_rows_cast1_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_rows_cast1_loc_empty_n, src_cols_cast2_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (src_cols_cast2_loc_empty_n = ap_const_logic_0) or (src_rows_cast1_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_rows_cast1_loc_read <= ap_const_logic_1;
        else 
            src_rows_cast1_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln24_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_reg_86),13));
    zext_ln25_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_i_reg_97),13));
    zext_ln29_1_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_cols_cast2_loc_dout),13));
    zext_ln29_fu_108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_rows_cast1_loc_dout),13));
end behav;
