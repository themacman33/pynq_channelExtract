-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xfChannelExtractKern is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_mat_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    p_src_mat_data_V_empty_n : IN STD_LOGIC;
    p_src_mat_data_V_read : OUT STD_LOGIC;
    p_dst_mat_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_mat_data_V_full_n : IN STD_LOGIC;
    p_dst_mat_data_V_write : OUT STD_LOGIC;
    p_channel : IN STD_LOGIC_VECTOR (2 downto 0);
    height : IN STD_LOGIC_VECTOR (15 downto 0);
    width : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of xfChannelExtractKern is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_src_mat_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln70_reg_477 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_mat_data_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln70_reg_477_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_reg_138 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln55_fu_305_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln55_reg_456 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln84_fu_313_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln84_reg_462 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln887_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_V_fu_328_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_V_reg_472 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln70_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln1597_fu_339_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal sub_ln647_2_fu_411_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln647_2_reg_486 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln647_fu_421_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln647_reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal t_V_1_reg_127 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln53_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_1_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_1_fu_167_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln55_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_1_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_1_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln57_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_1_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln59_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_1_fu_199_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln57_1_fu_225_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln57_2_fu_259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln57_3_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln57_2_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln59_fu_251_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln53_2_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln57_fu_277_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln55_2_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln55_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln53_fu_285_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln887_fu_319_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_pix_V_fu_345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln647_fu_353_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln647_1_fu_356_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln647_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln647_fu_369_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln647_1_fu_381_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_359_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln647_fu_375_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln647_fu_387_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln647_2_fu_403_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln647_1_fu_395_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln647_2_fu_417_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln647_3_fu_427_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln647_1_fu_430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln647_fu_436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln887_fu_323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln887_fu_323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_1_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                t_V_1_reg_127 <= i_V_reg_472;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_1_reg_127 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    t_V_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln70_fu_334_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                t_V_reg_138 <= add_ln1597_fu_339_p2;
            elsif (((icmp_ln887_fu_323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_reg_138 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_472 <= i_V_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln70_reg_477 <= icmp_ln70_fu_334_p2;
                icmp_ln70_reg_477_pp0_iter1_reg <= icmp_ln70_reg_477;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln70_reg_477 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln647_reg_491 <= lshr_ln647_fu_421_p2;
                    sub_ln647_2_reg_486(5 downto 1) <= sub_ln647_2_fu_411_p2(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    or_ln84_reg_462(4 downto 3) <= or_ln84_fu_313_p2(4 downto 3);
                    select_ln55_reg_456(4 downto 3) <= select_ln55_fu_305_p3(4 downto 3);
            end if;
        end if;
    end process;
    select_ln55_reg_456(2 downto 0) <= "000";
    or_ln84_reg_462(2 downto 0) <= "111";
    sub_ln647_2_reg_486(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln887_fu_323_p2, ap_CS_fsm_state2, icmp_ln70_fu_334_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln887_fu_323_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln70_fu_334_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln70_fu_334_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln1597_fu_339_p2 <= std_logic_vector(unsigned(t_V_reg_138) + unsigned(ap_const_lv16_1));
    and_ln55_fu_299_p2 <= (icmp_ln55_2_fu_293_p2 and icmp_ln53_2_fu_175_p2);
    and_ln647_fu_436_p2 <= (lshr_ln647_reg_491 and lshr_ln647_1_fu_430_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_src_mat_data_V_empty_n, p_dst_mat_data_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln70_reg_477, ap_enable_reg_pp0_iter2, icmp_ln70_reg_477_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln70_reg_477_pp0_iter1_reg = ap_const_lv1_0) and (p_dst_mat_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln70_reg_477 = ap_const_lv1_0) and (p_src_mat_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_src_mat_data_V_empty_n, p_dst_mat_data_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln70_reg_477, ap_enable_reg_pp0_iter2, icmp_ln70_reg_477_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln70_reg_477_pp0_iter1_reg = ap_const_lv1_0) and (p_dst_mat_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln70_reg_477 = ap_const_lv1_0) and (p_src_mat_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_src_mat_data_V_empty_n, p_dst_mat_data_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln70_reg_477, ap_enable_reg_pp0_iter2, icmp_ln70_reg_477_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln70_reg_477_pp0_iter1_reg = ap_const_lv1_0) and (p_dst_mat_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln70_reg_477 = ap_const_lv1_0) and (p_src_mat_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(p_src_mat_data_V_empty_n, icmp_ln70_reg_477)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln70_reg_477 = ap_const_lv1_0) and (p_src_mat_data_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter2_assign_proc : process(p_dst_mat_data_V_full_n, icmp_ln70_reg_477_pp0_iter1_reg)
    begin
                ap_block_state5_pp0_stage0_iter2 <= ((icmp_ln70_reg_477_pp0_iter1_reg = ap_const_lv1_0) and (p_dst_mat_data_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln70_fu_334_p2)
    begin
        if ((icmp_ln70_fu_334_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln887_fu_323_p2, ap_CS_fsm_state2)
    begin
        if ((((icmp_ln887_fu_323_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln887_fu_323_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln887_fu_323_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_V_fu_328_p2 <= std_logic_vector(unsigned(t_V_1_reg_127) + unsigned(ap_const_lv13_1));
    icmp_ln53_1_fu_155_p2 <= "1" when (p_channel = ap_const_lv3_4) else "0";
    icmp_ln53_2_fu_175_p2 <= "1" when (or_ln53_1_fu_167_p3 = ap_const_lv32_0) else "0";
    icmp_ln53_fu_149_p2 <= "1" when (p_channel = ap_const_lv3_0) else "0";
    icmp_ln55_1_fu_187_p2 <= "1" when (p_channel = ap_const_lv3_5) else "0";
    icmp_ln55_2_fu_293_p2 <= "0" when (or_ln55_1_fu_199_p3 = ap_const_lv32_0) else "1";
    icmp_ln55_fu_181_p2 <= "1" when (p_channel = ap_const_lv3_1) else "0";
    icmp_ln57_1_fu_213_p2 <= "1" when (p_channel = ap_const_lv3_6) else "0";
    icmp_ln57_2_fu_271_p2 <= "1" when (or_ln57_3_fu_265_p2 = ap_const_lv32_0) else "0";
    icmp_ln57_fu_207_p2 <= "1" when (p_channel = ap_const_lv3_2) else "0";
    icmp_ln59_1_fu_239_p2 <= "1" when (p_channel = ap_const_lv3_7) else "0";
    icmp_ln59_fu_233_p2 <= "1" when (p_channel = ap_const_lv3_3) else "0";
    icmp_ln647_fu_349_p2 <= "1" when (unsigned(select_ln55_reg_456) > unsigned(or_ln84_reg_462)) else "0";
    icmp_ln70_fu_334_p2 <= "1" when (t_V_reg_138 = width) else "0";
    icmp_ln887_fu_323_p2 <= "1" when (unsigned(zext_ln887_fu_319_p1) < unsigned(height)) else "0";
    in_pix_V_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_src_mat_data_V_dout),32));
    lshr_ln647_1_fu_430_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln647_3_fu_427_p1(31-1 downto 0)))));
    lshr_ln647_fu_421_p2 <= std_logic_vector(shift_right(unsigned(select_ln647_1_fu_395_p3),to_integer(unsigned('0' & zext_ln647_2_fu_417_p1(31-1 downto 0)))));
    or_ln53_1_fu_167_p3 <= (ap_const_lv31_0 & or_ln53_fu_161_p2);
    or_ln53_fu_161_p2 <= (icmp_ln53_fu_149_p2 or icmp_ln53_1_fu_155_p2);
    or_ln55_1_fu_199_p3 <= (ap_const_lv31_0 & or_ln55_fu_193_p2);
    or_ln55_fu_193_p2 <= (icmp_ln55_fu_181_p2 or icmp_ln55_1_fu_187_p2);
    or_ln57_1_fu_225_p3 <= (ap_const_lv31_0 & or_ln57_fu_219_p2);
    or_ln57_2_fu_259_p2 <= (or_ln57_1_fu_225_p3 or or_ln55_1_fu_199_p3);
    or_ln57_3_fu_265_p2 <= (or_ln57_2_fu_259_p2 or or_ln53_1_fu_167_p3);
    or_ln57_fu_219_p2 <= (icmp_ln57_fu_207_p2 or icmp_ln57_1_fu_213_p2);
    or_ln59_fu_245_p2 <= (icmp_ln59_fu_233_p2 or icmp_ln59_1_fu_239_p2);
    or_ln84_fu_313_p2 <= (select_ln55_fu_305_p3 or ap_const_lv5_7);

    p_dst_mat_data_V_blk_n_assign_proc : process(p_dst_mat_data_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln70_reg_477_pp0_iter1_reg)
    begin
        if (((icmp_ln70_reg_477_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_dst_mat_data_V_blk_n <= p_dst_mat_data_V_full_n;
        else 
            p_dst_mat_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst_mat_data_V_din <= and_ln647_fu_436_p2(8 - 1 downto 0);

    p_dst_mat_data_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln70_reg_477_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln70_reg_477_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_dst_mat_data_V_write <= ap_const_logic_1;
        else 
            p_dst_mat_data_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_src_mat_data_V_blk_n_assign_proc : process(p_src_mat_data_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln70_reg_477)
    begin
        if (((icmp_ln70_reg_477 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src_mat_data_V_blk_n <= p_src_mat_data_V_empty_n;
        else 
            p_src_mat_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_mat_data_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln70_reg_477, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln70_reg_477 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src_mat_data_V_read <= ap_const_logic_1;
        else 
            p_src_mat_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln53_fu_285_p3 <= 
        select_ln57_fu_277_p3 when (icmp_ln53_2_fu_175_p2(0) = '1') else 
        ap_const_lv5_0;
    select_ln55_fu_305_p3 <= 
        ap_const_lv5_8 when (and_ln55_fu_299_p2(0) = '1') else 
        select_ln53_fu_285_p3;
    select_ln57_fu_277_p3 <= 
        select_ln59_fu_251_p3 when (icmp_ln57_2_fu_271_p2(0) = '1') else 
        ap_const_lv5_10;
    select_ln59_fu_251_p3 <= 
        ap_const_lv5_18 when (or_ln59_fu_245_p2(0) = '1') else 
        ap_const_lv5_0;
    select_ln647_1_fu_395_p3 <= 
        tmp_2_fu_359_p4 when (icmp_ln647_fu_349_p2(0) = '1') else 
        in_pix_V_fu_345_p1;
    select_ln647_2_fu_403_p3 <= 
        xor_ln647_fu_375_p2 when (icmp_ln647_fu_349_p2(0) = '1') else 
        zext_ln647_fu_353_p1;
    select_ln647_fu_387_p3 <= 
        sub_ln647_fu_369_p2 when (icmp_ln647_fu_349_p2(0) = '1') else 
        sub_ln647_1_fu_381_p2;
    sub_ln647_1_fu_381_p2 <= std_logic_vector(unsigned(zext_ln647_1_fu_356_p1) - unsigned(zext_ln647_fu_353_p1));
    sub_ln647_2_fu_411_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(select_ln647_fu_387_p3));
    sub_ln647_fu_369_p2 <= std_logic_vector(unsigned(zext_ln647_fu_353_p1) - unsigned(zext_ln647_1_fu_356_p1));
    
    tmp_2_fu_359_p4_proc : process(in_pix_V_fu_345_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_2_fu_359_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := in_pix_V_fu_345_p1;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_2_fu_359_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_2_fu_359_p4_i) := in_pix_V_fu_345_p1(32-1-tmp_2_fu_359_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_2_fu_359_p4 <= resvalue(32-1 downto 0);
    end process;

    xor_ln647_fu_375_p2 <= (zext_ln647_fu_353_p1 xor ap_const_lv6_1F);
    zext_ln647_1_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln84_reg_462),6));
    zext_ln647_2_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln647_2_fu_403_p3),32));
    zext_ln647_3_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln647_2_reg_486),32));
    zext_ln647_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln55_reg_456),6));
    zext_ln887_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_1_reg_127),16));
end behav;
