// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module xfMat2axis (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_dst_data_V_dout,
        p_dst_data_V_empty_n,
        p_dst_data_V_read,
        dst_TDATA,
        dst_TVALID,
        dst_TREADY,
        dst_TLAST,
        src_rows_cast1_loc_dout,
        src_rows_cast1_loc_empty_n,
        src_rows_cast1_loc_read,
        src_cols_cast2_loc_dout,
        src_cols_cast2_loc_empty_n,
        src_cols_cast2_loc_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] p_dst_data_V_dout;
input   p_dst_data_V_empty_n;
output   p_dst_data_V_read;
output  [23:0] dst_TDATA;
output   dst_TVALID;
input   dst_TREADY;
output  [0:0] dst_TLAST;
input  [11:0] src_rows_cast1_loc_dout;
input   src_rows_cast1_loc_empty_n;
output   src_rows_cast1_loc_read;
input  [11:0] src_cols_cast2_loc_dout;
input   src_cols_cast2_loc_empty_n;
output   src_cols_cast2_loc_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_dst_data_V_read;
reg src_rows_cast1_loc_read;
reg src_cols_cast2_loc_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_dst_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln25_reg_212;
reg    dst_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln25_reg_212_pp0_iter1_reg;
reg    src_rows_cast1_loc_blk_n;
reg    src_cols_cast2_loc_blk_n;
reg   [11:0] j_0_i_i_reg_97;
reg   [11:0] src_rows_cast1_loc_r_reg_178;
reg    ap_block_state1;
reg   [11:0] src_cols_cast2_loc_r_reg_183;
wire   [12:0] add_ln29_fu_112_p2;
reg   [12:0] add_ln29_reg_188;
wire   [12:0] add_ln29_1_fu_122_p2;
reg   [12:0] add_ln29_1_reg_193;
wire   [0:0] icmp_ln24_fu_132_p2;
wire    ap_CS_fsm_state2;
wire    regslice_both_dst_data_V_U_apdone_blk;
wire   [11:0] i_fu_137_p2;
reg   [11:0] i_reg_202;
wire   [0:0] icmp_ln29_fu_143_p2;
reg   [0:0] icmp_ln29_reg_207;
wire   [0:0] icmp_ln25_fu_152_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [11:0] j_fu_157_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] and_ln29_fu_168_p2;
reg   [0:0] and_ln29_reg_221;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [11:0] i_0_i_i_reg_86;
wire    ap_CS_fsm_state6;
reg    ap_block_pp0_stage0_01001;
wire   [12:0] zext_ln29_fu_108_p1;
wire   [12:0] zext_ln29_1_fu_118_p1;
wire   [12:0] zext_ln24_fu_128_p1;
wire   [12:0] zext_ln25_fu_148_p1;
wire   [0:0] icmp_ln29_1_fu_163_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [23:0] dst_TDATA_int;
reg    dst_TVALID_int;
wire    dst_TREADY_int;
wire    regslice_both_dst_data_V_U_vld_out;
wire    regslice_both_dst_last_V_U_apdone_blk;
wire    regslice_both_dst_last_V_U_ack_in_dummy;
wire    regslice_both_dst_last_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

regslice_both #(
    .DataWidth( 24 ))
regslice_both_dst_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(dst_TDATA_int),
    .vld_in(dst_TVALID_int),
    .ack_in(dst_TREADY_int),
    .data_out(dst_TDATA),
    .vld_out(regslice_both_dst_data_V_U_vld_out),
    .ack_out(dst_TREADY),
    .apdone_blk(regslice_both_dst_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_dst_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(and_ln29_reg_221),
    .vld_in(dst_TVALID_int),
    .ack_in(regslice_both_dst_last_V_U_ack_in_dummy),
    .data_out(dst_TLAST),
    .vld_out(regslice_both_dst_last_V_U_vld_out),
    .ack_out(dst_TREADY),
    .apdone_blk(regslice_both_dst_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((regslice_both_dst_data_V_U_apdone_blk == 1'b0) & (icmp_ln24_fu_132_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((regslice_both_dst_data_V_U_apdone_blk == 1'b0) & (icmp_ln24_fu_132_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((regslice_both_dst_data_V_U_apdone_blk == 1'b0) & (icmp_ln24_fu_132_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_i_i_reg_86 <= i_reg_202;
    end else if ((~((ap_start == 1'b0) | (src_cols_cast2_loc_empty_n == 1'b0) | (src_rows_cast1_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_i_reg_86 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_dst_data_V_U_apdone_blk == 1'b0) & (icmp_ln24_fu_132_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_i_i_reg_97 <= 12'd0;
    end else if (((icmp_ln25_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_0_i_i_reg_97 <= j_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (src_cols_cast2_loc_empty_n == 1'b0) | (src_rows_cast1_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln29_1_reg_193 <= add_ln29_1_fu_122_p2;
        add_ln29_reg_188 <= add_ln29_fu_112_p2;
        src_cols_cast2_loc_r_reg_183 <= src_cols_cast2_loc_dout;
        src_rows_cast1_loc_r_reg_178 <= src_rows_cast1_loc_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln29_reg_221 <= and_ln29_fu_168_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_dst_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_202 <= i_fu_137_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln25_reg_212 <= icmp_ln25_fu_152_p2;
        icmp_ln25_reg_212_pp0_iter1_reg <= icmp_ln25_reg_212;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_dst_data_V_U_apdone_blk == 1'b0) & (icmp_ln24_fu_132_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln29_reg_207 <= icmp_ln29_fu_143_p2;
    end
end

always @ (*) begin
    if ((icmp_ln25_fu_152_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_dst_data_V_U_apdone_blk == 1'b0) & (icmp_ln24_fu_132_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_dst_data_V_U_apdone_blk == 1'b0) & (icmp_ln24_fu_132_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln25_reg_212_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln25_reg_212 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dst_TDATA_blk_n = dst_TREADY_int;
    end else begin
        dst_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_212 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_TVALID_int = 1'b1;
    end else begin
        dst_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_212 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_dst_data_V_blk_n = p_dst_data_V_empty_n;
    end else begin
        p_dst_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_212 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dst_data_V_read = 1'b1;
    end else begin
        p_dst_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src_cols_cast2_loc_blk_n = src_cols_cast2_loc_empty_n;
    end else begin
        src_cols_cast2_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (src_cols_cast2_loc_empty_n == 1'b0) | (src_rows_cast1_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src_cols_cast2_loc_read = 1'b1;
    end else begin
        src_cols_cast2_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src_rows_cast1_loc_blk_n = src_rows_cast1_loc_empty_n;
    end else begin
        src_rows_cast1_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (src_cols_cast2_loc_empty_n == 1'b0) | (src_rows_cast1_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src_rows_cast1_loc_read = 1'b1;
    end else begin
        src_rows_cast1_loc_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (src_cols_cast2_loc_empty_n == 1'b0) | (src_rows_cast1_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((regslice_both_dst_data_V_U_apdone_blk == 1'b0) & (icmp_ln24_fu_132_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((regslice_both_dst_data_V_U_apdone_blk == 1'b0) & (icmp_ln24_fu_132_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln25_fu_152_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln25_fu_152_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln29_1_fu_122_p2 = ($signed(zext_ln29_1_fu_118_p1) + $signed(13'd8191));

assign add_ln29_fu_112_p2 = ($signed(zext_ln29_fu_108_p1) + $signed(13'd8191));

assign and_ln29_fu_168_p2 = (icmp_ln29_reg_207 & icmp_ln29_1_fu_163_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln25_reg_212 == 1'd0) & (p_dst_data_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((icmp_ln25_reg_212 == 1'd0) & (p_dst_data_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((icmp_ln25_reg_212 == 1'd0) & (p_dst_data_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (src_cols_cast2_loc_empty_n == 1'b0) | (src_rows_cast1_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((icmp_ln25_reg_212 == 1'd0) & (dst_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln25_reg_212 == 1'd0) & (p_dst_data_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_io = ((icmp_ln25_reg_212_pp0_iter1_reg == 1'd0) & (dst_TREADY_int == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dst_TDATA_int = p_dst_data_V_dout;

assign dst_TVALID = regslice_both_dst_data_V_U_vld_out;

assign i_fu_137_p2 = (i_0_i_i_reg_86 + 12'd1);

assign icmp_ln24_fu_132_p2 = ((i_0_i_i_reg_86 == src_rows_cast1_loc_r_reg_178) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_152_p2 = ((j_0_i_i_reg_97 == src_cols_cast2_loc_r_reg_183) ? 1'b1 : 1'b0);

assign icmp_ln29_1_fu_163_p2 = ((zext_ln25_fu_148_p1 == add_ln29_1_reg_193) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_143_p2 = ((zext_ln24_fu_128_p1 == add_ln29_reg_188) ? 1'b1 : 1'b0);

assign j_fu_157_p2 = (j_0_i_i_reg_97 + 12'd1);

assign zext_ln24_fu_128_p1 = i_0_i_i_reg_86;

assign zext_ln25_fu_148_p1 = j_0_i_i_reg_97;

assign zext_ln29_1_fu_118_p1 = src_cols_cast2_loc_dout;

assign zext_ln29_fu_108_p1 = src_rows_cast1_loc_dout;

endmodule //xfMat2axis
