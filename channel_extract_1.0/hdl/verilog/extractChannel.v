// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module extractChannel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_src_mat_rows_dout,
        p_src_mat_rows_empty_n,
        p_src_mat_rows_read,
        p_src_mat_cols_dout,
        p_src_mat_cols_empty_n,
        p_src_mat_cols_read,
        p_src_mat_data_V_dout,
        p_src_mat_data_V_empty_n,
        p_src_mat_data_V_read,
        p_dst_mat_data_V_din,
        p_dst_mat_data_V_full_n,
        p_dst_mat_data_V_write,
        select_ln60_loc_dout,
        select_ln60_loc_empty_n,
        select_ln60_loc_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_src_mat_rows_dout;
input   p_src_mat_rows_empty_n;
output   p_src_mat_rows_read;
input  [31:0] p_src_mat_cols_dout;
input   p_src_mat_cols_empty_n;
output   p_src_mat_cols_read;
input  [23:0] p_src_mat_data_V_dout;
input   p_src_mat_data_V_empty_n;
output   p_src_mat_data_V_read;
output  [7:0] p_dst_mat_data_V_din;
input   p_dst_mat_data_V_full_n;
output   p_dst_mat_data_V_write;
input  [2:0] select_ln60_loc_dout;
input   select_ln60_loc_empty_n;
output   select_ln60_loc_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src_mat_rows_read;
reg p_src_mat_cols_read;
reg p_src_mat_data_V_read;
reg p_dst_mat_data_V_write;
reg select_ln60_loc_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_src_mat_rows_blk_n;
reg    p_src_mat_cols_blk_n;
reg    select_ln60_loc_blk_n;
reg   [2:0] select_ln60_loc_read_reg_67;
reg    ap_block_state1;
wire   [15:0] width_fu_59_p1;
reg   [15:0] width_reg_72;
wire   [15:0] trunc_ln115_fu_63_p1;
reg   [15:0] trunc_ln115_reg_77;
wire    grp_xfChannelExtractKern_fu_48_ap_start;
wire    grp_xfChannelExtractKern_fu_48_ap_done;
wire    grp_xfChannelExtractKern_fu_48_ap_idle;
wire    grp_xfChannelExtractKern_fu_48_ap_ready;
wire    grp_xfChannelExtractKern_fu_48_p_src_mat_data_V_read;
wire   [7:0] grp_xfChannelExtractKern_fu_48_p_dst_mat_data_V_din;
wire    grp_xfChannelExtractKern_fu_48_p_dst_mat_data_V_write;
reg    grp_xfChannelExtractKern_fu_48_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_xfChannelExtractKern_fu_48_ap_start_reg = 1'b0;
end

xfChannelExtractKern grp_xfChannelExtractKern_fu_48(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_xfChannelExtractKern_fu_48_ap_start),
    .ap_done(grp_xfChannelExtractKern_fu_48_ap_done),
    .ap_idle(grp_xfChannelExtractKern_fu_48_ap_idle),
    .ap_ready(grp_xfChannelExtractKern_fu_48_ap_ready),
    .p_src_mat_data_V_dout(p_src_mat_data_V_dout),
    .p_src_mat_data_V_empty_n(p_src_mat_data_V_empty_n),
    .p_src_mat_data_V_read(grp_xfChannelExtractKern_fu_48_p_src_mat_data_V_read),
    .p_dst_mat_data_V_din(grp_xfChannelExtractKern_fu_48_p_dst_mat_data_V_din),
    .p_dst_mat_data_V_full_n(p_dst_mat_data_V_full_n),
    .p_dst_mat_data_V_write(grp_xfChannelExtractKern_fu_48_p_dst_mat_data_V_write),
    .p_channel(select_ln60_loc_read_reg_67),
    .height(trunc_ln115_reg_77),
    .width(width_reg_72)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_xfChannelExtractKern_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_xfChannelExtractKern_fu_48_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_xfChannelExtractKern_fu_48_ap_start_reg <= 1'b1;
        end else if ((grp_xfChannelExtractKern_fu_48_ap_ready == 1'b1)) begin
            grp_xfChannelExtractKern_fu_48_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (select_ln60_loc_empty_n == 1'b0) | (p_src_mat_cols_empty_n == 1'b0) | (p_src_mat_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        select_ln60_loc_read_reg_67 <= select_ln60_loc_dout;
        trunc_ln115_reg_77 <= trunc_ln115_fu_63_p1;
        width_reg_72 <= width_fu_59_p1;
    end
end

always @ (*) begin
    if (((grp_xfChannelExtractKern_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_xfChannelExtractKern_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_dst_mat_data_V_write = grp_xfChannelExtractKern_fu_48_p_dst_mat_data_V_write;
    end else begin
        p_dst_mat_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_mat_cols_blk_n = p_src_mat_cols_empty_n;
    end else begin
        p_src_mat_cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (select_ln60_loc_empty_n == 1'b0) | (p_src_mat_cols_empty_n == 1'b0) | (p_src_mat_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_mat_cols_read = 1'b1;
    end else begin
        p_src_mat_cols_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_src_mat_data_V_read = grp_xfChannelExtractKern_fu_48_p_src_mat_data_V_read;
    end else begin
        p_src_mat_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_mat_rows_blk_n = p_src_mat_rows_empty_n;
    end else begin
        p_src_mat_rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (select_ln60_loc_empty_n == 1'b0) | (p_src_mat_cols_empty_n == 1'b0) | (p_src_mat_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_mat_rows_read = 1'b1;
    end else begin
        p_src_mat_rows_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        select_ln60_loc_blk_n = select_ln60_loc_empty_n;
    end else begin
        select_ln60_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (select_ln60_loc_empty_n == 1'b0) | (p_src_mat_cols_empty_n == 1'b0) | (p_src_mat_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        select_ln60_loc_read = 1'b1;
    end else begin
        select_ln60_loc_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (select_ln60_loc_empty_n == 1'b0) | (p_src_mat_cols_empty_n == 1'b0) | (p_src_mat_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_xfChannelExtractKern_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (select_ln60_loc_empty_n == 1'b0) | (p_src_mat_cols_empty_n == 1'b0) | (p_src_mat_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_xfChannelExtractKern_fu_48_ap_start = grp_xfChannelExtractKern_fu_48_ap_start_reg;

assign p_dst_mat_data_V_din = grp_xfChannelExtractKern_fu_48_p_dst_mat_data_V_din;

assign trunc_ln115_fu_63_p1 = p_src_mat_rows_dout[15:0];

assign width_fu_59_p1 = p_src_mat_cols_dout[15:0];

endmodule //extractChannel
