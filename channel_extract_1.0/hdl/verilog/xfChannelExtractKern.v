// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module xfChannelExtractKern (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_src_mat_data_V_dout,
        p_src_mat_data_V_empty_n,
        p_src_mat_data_V_read,
        p_dst_mat_data_V_din,
        p_dst_mat_data_V_full_n,
        p_dst_mat_data_V_write,
        p_channel,
        height,
        width
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] p_src_mat_data_V_dout;
input   p_src_mat_data_V_empty_n;
output   p_src_mat_data_V_read;
output  [7:0] p_dst_mat_data_V_din;
input   p_dst_mat_data_V_full_n;
output   p_dst_mat_data_V_write;
input  [2:0] p_channel;
input  [15:0] height;
input  [15:0] width;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src_mat_data_V_read;
reg p_dst_mat_data_V_write;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_src_mat_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln70_reg_477;
reg    p_dst_mat_data_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln70_reg_477_pp0_iter1_reg;
reg   [15:0] t_V_reg_138;
wire   [4:0] select_ln55_fu_305_p3;
reg   [4:0] select_ln55_reg_456;
wire   [4:0] or_ln84_fu_313_p2;
reg   [4:0] or_ln84_reg_462;
wire   [0:0] icmp_ln887_fu_323_p2;
wire    ap_CS_fsm_state2;
wire   [12:0] i_V_fu_328_p2;
reg   [12:0] i_V_reg_472;
wire   [0:0] icmp_ln70_fu_334_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] add_ln1597_fu_339_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] sub_ln647_2_fu_411_p2;
reg   [5:0] sub_ln647_2_reg_486;
wire   [31:0] lshr_ln647_fu_421_p2;
reg   [31:0] lshr_ln647_reg_491;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [12:0] t_V_1_reg_127;
wire    ap_CS_fsm_state6;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln53_fu_149_p2;
wire   [0:0] icmp_ln53_1_fu_155_p2;
wire   [0:0] or_ln53_fu_161_p2;
wire   [31:0] or_ln53_1_fu_167_p3;
wire   [0:0] icmp_ln55_fu_181_p2;
wire   [0:0] icmp_ln55_1_fu_187_p2;
wire   [0:0] or_ln55_fu_193_p2;
wire   [0:0] icmp_ln57_fu_207_p2;
wire   [0:0] icmp_ln57_1_fu_213_p2;
wire   [0:0] or_ln57_fu_219_p2;
wire   [0:0] icmp_ln59_fu_233_p2;
wire   [0:0] icmp_ln59_1_fu_239_p2;
wire   [0:0] or_ln59_fu_245_p2;
wire   [31:0] or_ln55_1_fu_199_p3;
wire   [31:0] or_ln57_1_fu_225_p3;
wire   [31:0] or_ln57_2_fu_259_p2;
wire   [31:0] or_ln57_3_fu_265_p2;
wire   [0:0] icmp_ln57_2_fu_271_p2;
wire   [4:0] select_ln59_fu_251_p3;
wire   [0:0] icmp_ln53_2_fu_175_p2;
wire   [4:0] select_ln57_fu_277_p3;
wire   [0:0] icmp_ln55_2_fu_293_p2;
wire   [0:0] and_ln55_fu_299_p2;
wire   [4:0] select_ln53_fu_285_p3;
wire   [15:0] zext_ln887_fu_319_p1;
wire   [31:0] in_pix_V_fu_345_p1;
wire   [5:0] zext_ln647_fu_353_p1;
wire   [5:0] zext_ln647_1_fu_356_p1;
wire   [0:0] icmp_ln647_fu_349_p2;
wire   [5:0] sub_ln647_fu_369_p2;
wire   [5:0] sub_ln647_1_fu_381_p2;
reg   [31:0] tmp_2_fu_359_p4;
wire   [5:0] xor_ln647_fu_375_p2;
wire   [5:0] select_ln647_fu_387_p3;
wire   [5:0] select_ln647_2_fu_403_p3;
wire   [31:0] select_ln647_1_fu_395_p3;
wire   [31:0] zext_ln647_2_fu_417_p1;
wire   [31:0] zext_ln647_3_fu_427_p1;
wire   [31:0] lshr_ln647_1_fu_430_p2;
wire   [31:0] and_ln647_fu_436_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln887_fu_323_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln887_fu_323_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        t_V_1_reg_127 <= i_V_reg_472;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_1_reg_127 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln70_fu_334_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_V_reg_138 <= add_ln1597_fu_339_p2;
    end else if (((icmp_ln887_fu_323_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_reg_138 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_472 <= i_V_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln70_reg_477 <= icmp_ln70_fu_334_p2;
        icmp_ln70_reg_477_pp0_iter1_reg <= icmp_ln70_reg_477;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln70_reg_477 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln647_reg_491 <= lshr_ln647_fu_421_p2;
        sub_ln647_2_reg_486[5 : 1] <= sub_ln647_2_fu_411_p2[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        or_ln84_reg_462[4 : 3] <= or_ln84_fu_313_p2[4 : 3];
        select_ln55_reg_456[4 : 3] <= select_ln55_fu_305_p3[4 : 3];
    end
end

always @ (*) begin
    if ((icmp_ln70_fu_334_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln887_fu_323_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_fu_323_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln70_reg_477_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_dst_mat_data_V_blk_n = p_dst_mat_data_V_full_n;
    end else begin
        p_dst_mat_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln70_reg_477_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_dst_mat_data_V_write = 1'b1;
    end else begin
        p_dst_mat_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln70_reg_477 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_mat_data_V_blk_n = p_src_mat_data_V_empty_n;
    end else begin
        p_src_mat_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln70_reg_477 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_mat_data_V_read = 1'b1;
    end else begin
        p_src_mat_data_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln887_fu_323_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln70_fu_334_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln70_fu_334_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1597_fu_339_p2 = (t_V_reg_138 + 16'd1);

assign and_ln55_fu_299_p2 = (icmp_ln55_2_fu_293_p2 & icmp_ln53_2_fu_175_p2);

assign and_ln647_fu_436_p2 = (lshr_ln647_reg_491 & lshr_ln647_1_fu_430_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln70_reg_477_pp0_iter1_reg == 1'd0) & (p_dst_mat_data_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln70_reg_477 == 1'd0) & (p_src_mat_data_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln70_reg_477_pp0_iter1_reg == 1'd0) & (p_dst_mat_data_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln70_reg_477 == 1'd0) & (p_src_mat_data_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln70_reg_477_pp0_iter1_reg == 1'd0) & (p_dst_mat_data_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln70_reg_477 == 1'd0) & (p_src_mat_data_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln70_reg_477 == 1'd0) & (p_src_mat_data_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((icmp_ln70_reg_477_pp0_iter1_reg == 1'd0) & (p_dst_mat_data_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_V_fu_328_p2 = (t_V_1_reg_127 + 13'd1);

assign icmp_ln53_1_fu_155_p2 = ((p_channel == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln53_2_fu_175_p2 = ((or_ln53_1_fu_167_p3 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_149_p2 = ((p_channel == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln55_1_fu_187_p2 = ((p_channel == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln55_2_fu_293_p2 = ((or_ln55_1_fu_199_p3 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_181_p2 = ((p_channel == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln57_1_fu_213_p2 = ((p_channel == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln57_2_fu_271_p2 = ((or_ln57_3_fu_265_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_207_p2 = ((p_channel == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln59_1_fu_239_p2 = ((p_channel == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_233_p2 = ((p_channel == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln647_fu_349_p2 = ((select_ln55_reg_456 > or_ln84_reg_462) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_334_p2 = ((t_V_reg_138 == width) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_323_p2 = ((zext_ln887_fu_319_p1 < height) ? 1'b1 : 1'b0);

assign in_pix_V_fu_345_p1 = p_src_mat_data_V_dout;

assign lshr_ln647_1_fu_430_p2 = 32'd4294967295 >> zext_ln647_3_fu_427_p1;

assign lshr_ln647_fu_421_p2 = select_ln647_1_fu_395_p3 >> zext_ln647_2_fu_417_p1;

assign or_ln53_1_fu_167_p3 = {{31'd0}, {or_ln53_fu_161_p2}};

assign or_ln53_fu_161_p2 = (icmp_ln53_fu_149_p2 | icmp_ln53_1_fu_155_p2);

assign or_ln55_1_fu_199_p3 = {{31'd0}, {or_ln55_fu_193_p2}};

assign or_ln55_fu_193_p2 = (icmp_ln55_fu_181_p2 | icmp_ln55_1_fu_187_p2);

assign or_ln57_1_fu_225_p3 = {{31'd0}, {or_ln57_fu_219_p2}};

assign or_ln57_2_fu_259_p2 = (or_ln57_1_fu_225_p3 | or_ln55_1_fu_199_p3);

assign or_ln57_3_fu_265_p2 = (or_ln57_2_fu_259_p2 | or_ln53_1_fu_167_p3);

assign or_ln57_fu_219_p2 = (icmp_ln57_fu_207_p2 | icmp_ln57_1_fu_213_p2);

assign or_ln59_fu_245_p2 = (icmp_ln59_fu_233_p2 | icmp_ln59_1_fu_239_p2);

assign or_ln84_fu_313_p2 = (select_ln55_fu_305_p3 | 5'd7);

assign p_dst_mat_data_V_din = and_ln647_fu_436_p2[7:0];

assign select_ln53_fu_285_p3 = ((icmp_ln53_2_fu_175_p2[0:0] === 1'b1) ? select_ln57_fu_277_p3 : 5'd0);

assign select_ln55_fu_305_p3 = ((and_ln55_fu_299_p2[0:0] === 1'b1) ? 5'd8 : select_ln53_fu_285_p3);

assign select_ln57_fu_277_p3 = ((icmp_ln57_2_fu_271_p2[0:0] === 1'b1) ? select_ln59_fu_251_p3 : 5'd16);

assign select_ln59_fu_251_p3 = ((or_ln59_fu_245_p2[0:0] === 1'b1) ? 5'd24 : 5'd0);

assign select_ln647_1_fu_395_p3 = ((icmp_ln647_fu_349_p2[0:0] === 1'b1) ? tmp_2_fu_359_p4 : in_pix_V_fu_345_p1);

assign select_ln647_2_fu_403_p3 = ((icmp_ln647_fu_349_p2[0:0] === 1'b1) ? xor_ln647_fu_375_p2 : zext_ln647_fu_353_p1);

assign select_ln647_fu_387_p3 = ((icmp_ln647_fu_349_p2[0:0] === 1'b1) ? sub_ln647_fu_369_p2 : sub_ln647_1_fu_381_p2);

assign sub_ln647_1_fu_381_p2 = (zext_ln647_1_fu_356_p1 - zext_ln647_fu_353_p1);

assign sub_ln647_2_fu_411_p2 = (6'd31 - select_ln647_fu_387_p3);

assign sub_ln647_fu_369_p2 = (zext_ln647_fu_353_p1 - zext_ln647_1_fu_356_p1);

integer ap_tvar_int_0;

always @ (in_pix_V_fu_345_p1) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            tmp_2_fu_359_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_2_fu_359_p4[ap_tvar_int_0] = in_pix_V_fu_345_p1[31 - ap_tvar_int_0];
        end
    end
end

assign xor_ln647_fu_375_p2 = (zext_ln647_fu_353_p1 ^ 6'd31);

assign zext_ln647_1_fu_356_p1 = or_ln84_reg_462;

assign zext_ln647_2_fu_417_p1 = select_ln647_2_fu_403_p3;

assign zext_ln647_3_fu_427_p1 = sub_ln647_2_reg_486;

assign zext_ln647_fu_353_p1 = select_ln55_reg_456;

assign zext_ln887_fu_319_p1 = t_V_1_reg_127;

always @ (posedge ap_clk) begin
    select_ln55_reg_456[2:0] <= 3'b000;
    or_ln84_reg_462[2:0] <= 3'b111;
    sub_ln647_2_reg_486[0] <= 1'b0;
end

endmodule //xfChannelExtractKern
